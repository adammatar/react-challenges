rules_version = "2";
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Allow read access to all collections by default
    match /{document=**} {
      allow read: if true;
      allow write: if request.auth != null;
    }

    // Discussions collection
    match /discussions/{discussionId} {
      allow read: if true;
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && 
        (resource.data.userId == request.auth.uid || 
         request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes', 'comments']));
      allow delete: if isAuthenticated() && resource.data.userId == request.auth.uid;

      // Comments subcollection
      match /comments/{commentId} {
        allow read: if true;
        allow create: if isAuthenticated();
        allow update: if isAuthenticated() && resource.data.userId == request.auth.uid;
        allow delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
      }
    }

    // Users collection
    match /users/{userId} {
      allow read: if true;
      allow create: if isAuthenticated() && request.auth.uid == userId;
      allow update: if isOwner(userId) && (
        // Allow updating progress data
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['progress']) ||
        // Allow updating basic profile fields
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['displayName', 'photoURL', 'username', 'emailVerified', 'lastLogin'])
      );
      allow delete: if isOwner(userId);
    }

    // Bookmarks collection
    match /bookmarks/{userId} {
      allow read, write: if isOwner(userId);
      
      match /discussions/{discussionId} {
        allow read, write: if isOwner(userId);
      }
    }

    // Notifications collection
    match /notifications/{notificationId} {
      allow read: if isAuthenticated() && resource.data.toUserId == request.auth.uid;
      allow create: if isAuthenticated();
      allow update, delete: if isAuthenticated() && resource.data.toUserId == request.auth.uid;
    }

    // Activities collection
    match /activities/{activityId} {
      allow read: if true;
      allow create: if isAuthenticated();
      allow update, delete: if false;
    }

    // User profiles collection
    match /profiles/{userId} {
      allow read: if true;
      allow write: if isOwner(userId);
    }

    // Challenges collection
    match /challenges/{challengeId} {
      allow read: if true;
      allow write: if request.auth != null;
      
      // Submissions subcollection
      match /submissions/{submissionId} {
        allow read: if true;
        allow create: if isAuthenticated();
        allow update, delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
      }
      
      // Comments subcollection
      match /comments/{commentId} {
        allow read: if true;
        allow create: if isAuthenticated();
        allow update, delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
      }
    }
  }
}
